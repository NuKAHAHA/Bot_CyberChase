package team

import (
	"Cyber-chase/internal/models"
	"Cyber-chase/internal/service"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	StateStart           = "start"    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	StateEmail           = "email"    // –í–≤–æ–¥ email
	StatePassword        = "password" // –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
	StateMenu            = "menu"     // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	StateAnswer          = "answer"   // –í–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞—á—É
	StateRegisterName    = "register_name"
	StateRegisterPass    = "register_pass"
	StateRegisterConfirm = "register_confirm"
)

// –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserSession struct {
	State        string
	Email        string
	TeamID       string
	TaskID       string
	TempTeamName string
}

// TelegramBot —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
type TelegramBot struct {
	bot         *tgbotapi.BotAPI
	teamService service.TeamService
	sessions    map[int64]*UserSession
}

// NewTelegramBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
func NewTelegramBot(token string, teamService service.TeamService) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &TelegramBot{
		bot:         bot,
		teamService: teamService,
		sessions:    make(map[int64]*UserSession),
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
func (b *TelegramBot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallback(update.CallbackQuery)
		}
	}

	return nil // –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
}

// getSession –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
func (b *TelegramBot) getSession(chatID int64) *UserSession {
	session, exists := b.sessions[chatID]
	if !exists {
		session = &UserSession{
			State: StateStart,
		}
		b.sessions[chatID] = session
	}
	return session
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *TelegramBot) handleMessage(message *tgbotapi.Message) {
	session := b.getSession(message.Chat.ID)

	switch session.State {
	case StateStart:
		if message.Text == "/start" {
			msg := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –í–æ–π—Ç–∏ - –≤–≤–µ–¥–∏—Ç–µ email\n2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –≤–≤–µ–¥–∏—Ç–µ /register"
			b.sendMessage(message.Chat.ID, msg)
		} else if message.Text == "/register" {
			b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
			session.State = StateRegisterName
		} else {
			session.Email = strings.TrimSpace(message.Text)
			b.checkEmailAndProceed(message.Chat.ID, session)
		}
	case StateRegisterConfirm:
		response := strings.ToLower(strings.TrimSpace(message.Text))
		switch response {
		case "–¥–∞", "yes":
			b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
			session.State = StateRegisterName
		case "–Ω–µ—Ç", "no":
			b.sendMessage(message.Chat.ID, "–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ email —Å–Ω–æ–≤–∞:")
			session.State = StateStart
		default:
			b.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
		}
	case StateRegisterName:
		session.TempTeamName = message.Text
		b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
		session.State = StateRegisterPass

	case StateRegisterPass:
		email := strings.TrimSpace(message.Text)
		if !isValidEmail(email) {
			b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
			return
		}

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
		err := b.teamService.RegisterTeam(email, session.TempTeamName)
		if err != nil {
			b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.Error())
			session.State = StateStart
			return
		}

		msg := fmt.Sprintf("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ %s", email)
		b.sendMessage(message.Chat.ID, msg)
		session.State = StateStart

	case StateEmail:
		email := strings.TrimSpace(message.Text)
		session.Email = email
		b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
		session.State = StatePassword

	case StatePassword:
		password := strings.TrimSpace(message.Text)

		// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
		team, err := b.teamService.AuthenticateTeam(session.Email, password)
		if err != nil {
			b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í–≤–µ–¥–∏—Ç–µ email:")
			session.State = StateEmail
			return
		}

		// –°–≤—è–∑—ã–≤–∞–µ–º Telegram ID —Å –∫–æ–º–∞–Ω–¥–æ–π
		err = b.teamService.LinkTelegramToTeam(session.Email, message.Chat.ID)
		if err != nil {
			b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram –∫ –∫–æ–º–∞–Ω–¥–µ: "+err.Error())
			session.State = StateStart
			return
		}

		session.TeamID = team.ID.String()
		b.sendMainMenu(message.Chat.ID)
		session.State = StateMenu

	case StateMenu:
		b.handleMenuCommand(message)

	case StateAnswer:
		answer := strings.TrimSpace(message.Text)

		// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ teamID –∏ taskID
		// –ü—Ä—è–º–æ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ UUID
		correct, err := b.teamService.SubmitAnswer(models.UUIDFromString(session.TeamID), models.UUIDFromString(session.TaskID), answer)
		if err != nil {
			b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: "+err.Error())
		} else if correct {
			b.sendMessage(message.Chat.ID, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üéâ")
		} else {
			b.sendMessage(message.Chat.ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		}

		b.sendMainMenu(message.Chat.ID)
		session.State = StateMenu
	}
}

func (b *TelegramBot) checkEmailAndProceed(chatID int64, session *UserSession) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ email
	_, err := b.teamService.GetTeamByEmail(session.Email)

	if err != nil {
		// –ï—Å–ª–∏ email –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
		msg := fmt.Sprintf("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Å email %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? (–¥–∞/–Ω–µ—Ç)", session.Email)
		b.sendMessage(chatID, msg)
		session.State = StateRegisterConfirm
	} else {
		// –ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
		b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
		session.State = StatePassword
	}
}

func isValidEmail(email string) bool {
	return regexp.MustCompile(`^[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,4}$`).MatchString(email)
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func (b *TelegramBot) handleCallback(callback *tgbotapi.CallbackQuery) {
	session := b.getSession(callback.Message.Chat.ID)

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
	callbackConfig := tgbotapi.NewCallback(callback.ID, "")
	b.bot.Request(callbackConfig)

	switch callback.Data {
	case "join_contest":
		b.handleJoinContest(callback.Message.Chat.ID, session)
	case "get_task":
		b.handleGetTask(callback.Message.Chat.ID, session)
	case "submit_answer":
		b.sendMessage(callback.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
		session.State = StateAnswer
	}
}

// sendStartMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *TelegramBot) sendStartMessage(chatID int64) {
	msg := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥!\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ email –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:"
	b.sendMessage(chatID, msg)
}

// sendMainMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (b *TelegramBot) sendMainMenu(chatID int64) {
	var keyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É", "join_contest"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É", "get_task"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", "submit_answer"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
	msg.ReplyMarkup = keyboard
	b.bot.Send(msg)
}

// handleMenuCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func (b *TelegramBot) handleMenuCommand(message *tgbotapi.Message) {
	switch message.Text {
	case "/start":
		b.sendStartMessage(message.Chat.ID)
		b.sessions[message.Chat.ID].State = StateEmail
	case "/menu":
		b.sendMainMenu(message.Chat.ID)
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu")
	}
}

// handleJoinContest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É
func (b *TelegramBot) handleJoinContest(chatID int64, session *UserSession) {
	teamID := models.UUIDFromString(session.TeamID)
	contest, err := b.teamService.JoinContest(teamID)
	if err != nil {
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É: "+err.Error())
		return
	}

	msg := "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É: " + contest.Name + "\n" +
		"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: " + contest.StartDate.Format("02.01.2006 15:04") + "\n" +
		"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: " + contest.EndDate.Format("02.01.2006 15:04")
	b.sendMessage(chatID, msg)
}

// handleGetTask –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
func (b *TelegramBot) handleGetTask(chatID int64, session *UserSession) {
	teamID := models.UUIDFromString(session.TeamID)
	task, err := b.teamService.GetTask(teamID)
	if err != nil {
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: "+err.Error())
		return
	}

	session.TaskID = task.ID.String()

	msg := "–ó–∞–¥–∞—á–∞:\n\n" + task.Question
	if task.QuestionFile != "" {
		msg += "\n\n–§–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: " + task.QuestionFile
	}

	if task.TimeLimit > 0 {
		msg += "\n\n–í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ: " + strconv.Itoa(task.TimeLimit) + " –º–∏–Ω—É—Ç"
	}

	b.sendMessage(chatID, msg)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *TelegramBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
