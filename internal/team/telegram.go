package team

import (
	"Cyber-chase/internal/models"
	"Cyber-chase/internal/pkg"
	"Cyber-chase/internal/service"
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/golang-jwt/jwt/v4"
	"github.com/google/uuid"
	"io"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	StateStart            = "start"
	StateEmail            = "email"
	StatePassword         = "password"
	StateMenu             = "menu"
	StateAnswer           = "answer"
	StateRegisterName     = "register_name"
	StateRegisterPass     = "register_pass"
	StateRegisterConfirm  = "register_confirm"
	StateWaitingGeo       = "waiting_geo"
	StateWaitingApprove   = "waiting_approve"
	StateReadyToGetTask   = "ready_to_get_task"
	StateTaskReceived     = "task_received"
	StateAllTasksComplete = "all_tasks_done"
)

// –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserSession struct {
	State        string
	Email        string
	TeamID       string
	TaskID       string
	TempTeamName string
}

// TelegramBot —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
type TelegramBot struct {
	bot         *tgbotapi.BotAPI
	teamService service.TeamService
	sessions    map[int64]*UserSession
}

// NewTelegramBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
func NewTelegramBot(token string, teamService service.TeamService) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &TelegramBot{
		bot:         bot,
		teamService: teamService,
		sessions:    make(map[int64]*UserSession),
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
func (b *TelegramBot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallback(update.CallbackQuery)
		}
	}

	return nil // –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
}

// getSession –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
func (b *TelegramBot) getSession(chatID int64) *UserSession {
	session, exists := b.sessions[chatID]
	if !exists {
		session = &UserSession{
			State: StateStart,
		}
		b.sessions[chatID] = session
	}
	return session
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *TelegramBot) handleMessage(message *tgbotapi.Message) {
	session := b.getSession(message.Chat.ID)

	switch session.State {
	case StateStart:
		if message.Text == "/start" {
			msg := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –í–æ–π—Ç–∏ - –≤–≤–µ–¥–∏—Ç–µ email\n2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –≤–≤–µ–¥–∏—Ç–µ /register"
			b.sendMessage(message.Chat.ID, msg)
		} else if message.Text == "/register" {
			b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
			session.State = StateRegisterName
		} else {
			session.Email = strings.TrimSpace(message.Text)
			b.checkEmailAndProceed(message.Chat.ID, session)
		}
	case StateRegisterConfirm:
		response := strings.ToLower(strings.TrimSpace(message.Text))
		switch response {
		case "–¥–∞", "yes":
			b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
			session.State = StateRegisterName
		case "–Ω–µ—Ç", "no":
			b.sendMessage(message.Chat.ID, "–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ email —Å–Ω–æ–≤–∞:")
			session.State = StateStart
		default:
			b.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
		}
	case StateRegisterName:
		session.TempTeamName = message.Text
		b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
		session.State = StateRegisterPass

	case StateRegisterPass:
		email := strings.TrimSpace(message.Text)
		if !isValidEmail(email) {
			b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
			return
		}

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
		err := b.teamService.RegisterTeam(email, session.TempTeamName)
		if err != nil {
			b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.Error())
			session.State = StateStart
			return
		}

		msg := fmt.Sprintf("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ %s", email)
		b.sendMessage(message.Chat.ID, msg)
		session.State = StateStart

	case StateEmail:
		email := strings.TrimSpace(message.Text)
		session.Email = email
		b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
		session.State = StatePassword

	case StatePassword:
		password := strings.TrimSpace(message.Text)

		// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
		team, err := b.teamService.AuthenticateTeam(session.Email, password)
		if err != nil {
			b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í–≤–µ–¥–∏—Ç–µ email:")
			session.State = StateEmail
			return
		}

		// –°–≤—è–∑—ã–≤–∞–µ–º Telegram ID —Å –∫–æ–º–∞–Ω–¥–æ–π
		err = b.teamService.LinkTelegramToTeam(session.Email, message.Chat.ID)
		if err != nil {
			b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram –∫ –∫–æ–º–∞–Ω–¥–µ: "+err.Error())
			session.State = StateStart
			return
		}

		session.TeamID = team.ID.String()
		session.State = StateMenu
		b.sendMainMenu(message.Chat.ID)

	case StateMenu:
		b.handleMenuCommand(message)

	case StateAnswer:
		answer := strings.TrimSpace(message.Text)

		correct, err := b.teamService.SubmitAnswer(
			models.UUIDFromString(session.TeamID),
			models.UUIDFromString(session.TaskID),
			answer,
		)

		if err != nil {
			b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: "+err.Error())
		} else if correct {
			b.sendMessage(message.Chat.ID, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
		} else {
			b.sendMessage(message.Chat.ID, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.")
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
		sessionData, err := b.teamService.GetTaskSession(
			models.UUIDFromString(session.TeamID),
			models.UUIDFromString(session.TaskID),
		)

		if err == nil && sessionData.Finished {
			// –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
			task, err := b.teamService.GetTask(models.UUIDFromString(session.TeamID))
			if err != nil {
				b.sendMessage(message.Chat.ID, "–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
			} else {
				session.TaskID = task.ID.String()
				b.sendMessage(message.Chat.ID, "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:\\n\\n\""+task.Question)
				return
			}
		}

		session.State = StateMenu
		b.sendMainMenu(message.Chat.ID)
	}
}

func (b *TelegramBot) checkEmailAndProceed(chatID int64, session *UserSession) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ email
	_, err := b.teamService.GetTeamByEmail(session.Email)

	if err != nil {
		// –ï—Å–ª–∏ email –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
		msg := fmt.Sprintf("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Å email %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? (–¥–∞/–Ω–µ—Ç)", session.Email)
		b.sendMessage(chatID, msg)
		session.State = StateRegisterConfirm
	} else {
		// –ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
		b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
		session.State = StatePassword
	}
}

func isValidEmail(email string) bool {
	return regexp.MustCompile(`^[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,4}$`).MatchString(email)
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func (b *TelegramBot) handleCallback(callback *tgbotapi.CallbackQuery) {
	session := b.getSession(callback.Message.Chat.ID)
	b.bot.Request(tgbotapi.NewCallback(callback.ID, ""))

	switch callback.Data {
	case "join_contest":
		contest, err := b.teamService.JoinContest(uuid.MustParse(session.TeamID))
		if err != nil {
			b.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞: "+err.Error())
			return
		}
		b.sendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É: %s", contest.Name))
		session.State = StateWaitingGeo
		b.sendMainMenu(callback.Message.Chat.ID)

	case "send_geo":
		teamID := uuid.MustParse(session.TeamID)

		// 1. –ü–æ–ª—É—á–∞–µ–º companyID –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
		companyID, err := b.teamService.GetCompanyIDByTeam(teamID)
		if err != nil {
			b.sendMessage(callback.Message.Chat.ID, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏: "+err.Error())
			return
		}

		// 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏
		token, err := b.getCompanyTokenDirect(companyID)
		if err != nil {
			b.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: "+err.Error())
			return
		}

		// 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
		locReq, err := http.NewRequest("GET", "http://localhost:8080/api/v1/company/location", nil)
		if err != nil {
			b.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: "+err.Error())
			return
		}
		locReq.Header.Set("Authorization", "Bearer "+token)

		client := &http.Client{}
		locResp, err := client.Do(locReq)
		if err != nil {
			b.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: "+err.Error())
			return
		}
		defer locResp.Body.Close()

		// 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
		locBody, _ := io.ReadAll(locResp.Body)
		if locResp.StatusCode != http.StatusOK {
			b.sendMessage(callback.Message.Chat.ID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: —Å—Ç–∞—Ç—É—Å %d, –æ—Ç–≤–µ—Ç: %s",
				locResp.StatusCode, string(locBody)))
			return
		}

		// 5. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
		var locationResponse struct {
			MapLink string `json:"map_link"`
		}
		if err := json.Unmarshal(locBody, &locationResponse); err != nil {
			b.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: "+err.Error())
			return
		}

		// 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		b.sendMessage(callback.Message.Chat.ID, "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:\n"+locationResponse.MapLink)
		b.sendMessage(callback.Message.Chat.ID, "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è...")
		session.State = StateWaitingApprove
		go b.awaitApproval(callback.Message.Chat.ID, session)

	case "get_task":
		b.handleGetTask(callback.Message.Chat.ID, session)

	case "submit_answer":
		b.sendMessage(callback.Message.Chat.ID, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
		session.State = StateAnswer

	case "logout":
		delete(b.sessions, callback.Message.Chat.ID)
		b.sendMessage(callback.Message.Chat.ID, "üö™ –í—ã –≤—ã—à–ª–∏. –í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
	}
}

func (b *TelegramBot) getCompanyToken(teamID uuid.UUID) (string, error) {
	// 1. –ü–æ–ª—É—á–∏—Ç—å CompanyID —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥
	companyID, err := b.teamService.GetCompanyIDByTeam(teamID)
	if err != nil {
		return "", fmt.Errorf("team company not found: %v", err)
	}

	// 2. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
	companyData, err := b.teamService.GetCompanyCredentials(companyID)
	if err != nil {
		return "", fmt.Errorf("company data error: %v", err)
	}

	// 3. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–æ–º–ø–∞–Ω–∏—è
	client := &http.Client{}
	data := map[string]string{
		"email":    companyData.Email,
		"password": companyData.TempPassword,
	}
	jsonData, _ := json.Marshal(data)

	resp, err := client.Post(
		"http://localhost:8080/api/v1/company/login",
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil || resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %v", err)
	}
	defer resp.Body.Close()

	// 3. –ü–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
	var result struct {
		Token string `json:"token"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	return result.Token, nil
}

// sendStartMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *TelegramBot) sendStartMessage(chatID int64) {
	msg := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥!\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ email –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:"
	b.sendMessage(chatID, msg)
}

// sendMainMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (b *TelegramBot) sendMainMenu(chatID int64) {
	session := b.getSession(chatID)
	var buttons [][]tgbotapi.InlineKeyboardButton

	switch session.State {
	case StateMenu:
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É", "join_contest"),
		})
	case StateWaitingGeo:
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ", "send_geo"),
		})
	case StateWaitingApprove:
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("–û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è...", "waiting_approve"),
		})
	case StateReadyToGetTask:
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "get_task"),
		})
	case StateTaskReceived:
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("–î–∞—Ç—å –æ—Ç–≤–µ—Ç", "submit_answer"),
		})
	case StateAllTasksComplete:
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("–í—ã–π—Ç–∏", "logout"),
		})
	}

	msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
	if len(buttons) > 0 {
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	} else {
		msg.Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
	}
	b.bot.Send(msg)
}

// handleMenuCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func (b *TelegramBot) handleMenuCommand(message *tgbotapi.Message) {
	switch message.Text {
	case "/start":
		b.sendStartMessage(message.Chat.ID)
		b.sessions[message.Chat.ID].State = StateEmail
	case "/menu":
		b.sendMainMenu(message.Chat.ID)
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu")
	}
}

// handleJoinContest –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É
func (b *TelegramBot) handleJoinContest(chatID int64, session *UserSession) {
	teamID := models.UUIDFromString(session.TeamID)
	contest, err := b.teamService.JoinContest(teamID)
	if err != nil {
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É: "+err.Error())
		return
	}

	msg := "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–Ω—Ç–µ—Å—Ç—É: " + contest.Name + "\n" +
		"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: " + contest.StartDate.Format("02.01.2006 15:04") + "\n" +
		"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: " + contest.EndDate.Format("02.01.2006 15:04")
	b.sendMessage(chatID, msg)
}

func (b *TelegramBot) awaitApproval(chatID int64, session *UserSession) {
	_, err := b.teamService.GetTeamByEmail(session.Email)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	for i := 0; i < 30; i++ { // –¥–æ 30 –ø–æ–ø—ã—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 —Å–µ–∫—É–Ω–¥)
		time.Sleep(2 * time.Second)
		updated, err := b.teamService.GetTeamByEmail(session.Email)
		if err == nil && updated.CompanyID != nil {
			b.sendMessage(chatID, "üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–µ–π!")
			session.State = StateReadyToGetTask
			b.sendMainMenu(chatID)
			return
		}
	}

	b.sendMessage(chatID, "‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	session.State = StateMenu
	b.sendMainMenu(chatID)
}

// handleGetTask –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
func (b *TelegramBot) handleGetTask(chatID int64, session *UserSession) {
	task, err := b.teamService.GetTask(uuid.MustParse(session.TeamID))
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: "+err.Error())
		return
	}

	session.TaskID = task.ID.String()
	session.State = StateTaskReceived

	if task.QuestionFile != "" {
		filePath := pkg.GetFilePath(task.ID, task.QuestionFile)
		doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filePath))
		doc.Caption = fmt.Sprintf("–ó–∞–¥–∞—á–∞:\n\n%s\n\n–í—Ä–µ–º—è: %d –º–∏–Ω—É—Ç", task.Question, task.TimeLimit)
		b.bot.Send(doc)
	} else {
		b.sendMessage(chatID, fmt.Sprintf("–ó–∞–¥–∞—á–∞:\n\n%s\n\n–í—Ä–µ–º—è: %d –º–∏–Ω—É—Ç", task.Question, task.TimeLimit))
	}

	b.sendMainMenu(chatID)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *TelegramBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

// Helper function to authenticate as a company and get a token
func (b *TelegramBot) authenticateCompany(email, password string) (string, error) {
	client := &http.Client{}

	// Check the actual request structure expected by the server
	// This structure should match what the server expects to unmarshal
	data := map[string]interface{}{
		"email":    email,
		"password": password,
	}

	jsonData, err := json.Marshal(data)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %v", err)
	}

	// For debugging - log the request body
	log.Printf("Authentication request body: %s", string(jsonData))

	resp, err := client.Post(
		"http://localhost:8080/api/v1/company/login",
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	// Read the response body for debugging
	respBody, _ := io.ReadAll(resp.Body)
	log.Printf("Authentication response (status %d): %s", resp.StatusCode, string(respBody))

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(respBody))
	}

	// Need to create a new reader since we consumed the response body above
	var result struct {
		Token string `json:"token"`
	}
	if err := json.Unmarshal(respBody, &result); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	return result.Token, nil
}

// Alternative implementation that checks company credentials first
func (b *TelegramBot) authenticateCompany2(companyID uuid.UUID) (string, error) {
	// 1. Get company data to check what credentials we have
	company, err := b.teamService.GetCompanyCredentials(companyID)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: %v", err)
	}

	// Log credentials for debugging (remove in production)
	log.Printf("Company credentials - Email: %s, TempPass: %s", company.Email, company.TempPassword)

	client := &http.Client{}

	// Try different request structures
	// Version 1: Standard format
	reqBody1 := map[string]string{
		"email":    company.Email,
		"password": company.TempPassword,
	}

	// Version 2: Using different field names (in case server expects different names)
	reqBody2 := map[string]string{
		"email":        company.Email,
		"tempPassword": company.TempPassword,
	}

	// Try first format
	jsonData, _ := json.Marshal(reqBody1)
	resp, err := client.Post(
		"http://localhost:8080/api/v1/company/login",
		"application/json",
		bytes.NewBuffer(jsonData),
	)

	if err != nil || resp.StatusCode != http.StatusOK {
		// If first format fails, try second format
		jsonData, _ = json.Marshal(reqBody2)
		resp, err = client.Post(
			"http://localhost:8080/api/v1/company/login",
			"application/json",
			bytes.NewBuffer(jsonData),
		)

		if err != nil {
			return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		}
	}

	defer resp.Body.Close()

	// Read response body
	respBody, _ := io.ReadAll(resp.Body)

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(respBody))
	}

	var result struct {
		Token string `json:"token"`
	}
	if err := json.Unmarshal(respBody, &result); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	return result.Token, nil
}

func (b *TelegramBot) getCompanyLocation(token string) (string, error) {
	client := &http.Client{}
	req, err := http.NewRequest("GET", "http://localhost:8080/api/v1/company/location", nil)
	if err != nil {
		return "", err
	}
	req.Header.Set("Authorization", "Bearer "+token)

	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	var locationResponse struct {
		MapLink string `json:"map_link"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&locationResponse); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	return locationResponse.MapLink, nil
}

func (b *TelegramBot) getCompanyTokenDirect(companyID uuid.UUID) (string, error) {
	// Do a direct database query to get the company info
	// This is instead of going through the API login flow
	company, err := b.teamService.GetCompanyByID(companyID)
	if err != nil {
		return "", fmt.Errorf("failed to get company: %v", err)
	}

	// Generate a JWT token directly using the same logic as your API
	// You'll need to share the JWT secret with this code
	jwtSecret := os.Getenv("JWT_SECRET") // Replace with your actual JWT secret

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"sub":            company.ID.String(),
		"role":           "company",
		"exp":            time.Now().Add(time.Hour * 24).Unix(),
		"reset_required": company.ResetRequired,
	})

	tokenString, err := token.SignedString([]byte(jwtSecret))
	if err != nil {
		return "", fmt.Errorf("failed to generate token: %v", err)
	}

	return tokenString, nil
}
